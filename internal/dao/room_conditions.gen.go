// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"hotel/internal/model"
)

func newRoomCondition(db *gorm.DB, opts ...gen.DOOption) roomCondition {
	_roomCondition := roomCondition{}

	_roomCondition.roomConditionDo.UseDB(db, opts...)
	_roomCondition.roomConditionDo.UseModel(&model.RoomCondition{})

	tableName := _roomCondition.roomConditionDo.TableName()
	_roomCondition.ALL = field.NewAsterisk(tableName)
	_roomCondition.ID = field.NewUint(tableName, "id")
	_roomCondition.CreatedAt = field.NewTime(tableName, "created_at")
	_roomCondition.UpdatedAt = field.NewTime(tableName, "updated_at")
	_roomCondition.DeletedAt = field.NewField(tableName, "deleted_at")
	_roomCondition.RoomID = field.NewUint(tableName, "room_id")
	_roomCondition.OrderID = field.NewUint(tableName, "order_id")
	_roomCondition.No = field.NewUint(tableName, "no")
	_roomCondition.CheckInTime = field.NewTime(tableName, "check_in_time")
	_roomCondition.EndTime = field.NewTime(tableName, "end_time")
	_roomCondition.RoomPrice = field.NewFloat64(tableName, "room_price")
	_roomCondition.PayFee = field.NewFloat64(tableName, "pay_fee")
	_roomCondition.Balance = field.NewFloat64(tableName, "balance")
	_roomCondition.SurplusDay = field.NewInt32(tableName, "surplus_day")
	_roomCondition.Status = field.NewUint(tableName, "status")

	_roomCondition.fillFieldMap()

	return _roomCondition
}

type roomCondition struct {
	roomConditionDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	RoomID      field.Uint
	OrderID     field.Uint
	No          field.Uint
	CheckInTime field.Time
	EndTime     field.Time
	RoomPrice   field.Float64
	PayFee      field.Float64
	Balance     field.Float64
	SurplusDay  field.Int32
	Status      field.Uint

	fieldMap map[string]field.Expr
}

func (r roomCondition) Table(newTableName string) *roomCondition {
	r.roomConditionDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roomCondition) As(alias string) *roomCondition {
	r.roomConditionDo.DO = *(r.roomConditionDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roomCondition) updateTableName(table string) *roomCondition {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.RoomID = field.NewUint(table, "room_id")
	r.OrderID = field.NewUint(table, "order_id")
	r.No = field.NewUint(table, "no")
	r.CheckInTime = field.NewTime(table, "check_in_time")
	r.EndTime = field.NewTime(table, "end_time")
	r.RoomPrice = field.NewFloat64(table, "room_price")
	r.PayFee = field.NewFloat64(table, "pay_fee")
	r.Balance = field.NewFloat64(table, "balance")
	r.SurplusDay = field.NewInt32(table, "surplus_day")
	r.Status = field.NewUint(table, "status")

	r.fillFieldMap()

	return r
}

func (r *roomCondition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roomCondition) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 14)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["room_id"] = r.RoomID
	r.fieldMap["order_id"] = r.OrderID
	r.fieldMap["no"] = r.No
	r.fieldMap["check_in_time"] = r.CheckInTime
	r.fieldMap["end_time"] = r.EndTime
	r.fieldMap["room_price"] = r.RoomPrice
	r.fieldMap["pay_fee"] = r.PayFee
	r.fieldMap["balance"] = r.Balance
	r.fieldMap["surplus_day"] = r.SurplusDay
	r.fieldMap["status"] = r.Status
}

func (r roomCondition) clone(db *gorm.DB) roomCondition {
	r.roomConditionDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roomCondition) replaceDB(db *gorm.DB) roomCondition {
	r.roomConditionDo.ReplaceDB(db)
	return r
}

type roomConditionDo struct{ gen.DO }

type IRoomConditionDo interface {
	gen.SubQuery
	Debug() IRoomConditionDo
	WithContext(ctx context.Context) IRoomConditionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoomConditionDo
	WriteDB() IRoomConditionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoomConditionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoomConditionDo
	Not(conds ...gen.Condition) IRoomConditionDo
	Or(conds ...gen.Condition) IRoomConditionDo
	Select(conds ...field.Expr) IRoomConditionDo
	Where(conds ...gen.Condition) IRoomConditionDo
	Order(conds ...field.Expr) IRoomConditionDo
	Distinct(cols ...field.Expr) IRoomConditionDo
	Omit(cols ...field.Expr) IRoomConditionDo
	Join(table schema.Tabler, on ...field.Expr) IRoomConditionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoomConditionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoomConditionDo
	Group(cols ...field.Expr) IRoomConditionDo
	Having(conds ...gen.Condition) IRoomConditionDo
	Limit(limit int) IRoomConditionDo
	Offset(offset int) IRoomConditionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomConditionDo
	Unscoped() IRoomConditionDo
	Create(values ...*model.RoomCondition) error
	CreateInBatches(values []*model.RoomCondition, batchSize int) error
	Save(values ...*model.RoomCondition) error
	First() (*model.RoomCondition, error)
	Take() (*model.RoomCondition, error)
	Last() (*model.RoomCondition, error)
	Find() ([]*model.RoomCondition, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoomCondition, err error)
	FindInBatches(result *[]*model.RoomCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RoomCondition) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoomConditionDo
	Assign(attrs ...field.AssignExpr) IRoomConditionDo
	Joins(fields ...field.RelationField) IRoomConditionDo
	Preload(fields ...field.RelationField) IRoomConditionDo
	FirstOrInit() (*model.RoomCondition, error)
	FirstOrCreate() (*model.RoomCondition, error)
	FindByPage(offset int, limit int) (result []*model.RoomCondition, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoomConditionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roomConditionDo) Debug() IRoomConditionDo {
	return r.withDO(r.DO.Debug())
}

func (r roomConditionDo) WithContext(ctx context.Context) IRoomConditionDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roomConditionDo) ReadDB() IRoomConditionDo {
	return r.Clauses(dbresolver.Read)
}

func (r roomConditionDo) WriteDB() IRoomConditionDo {
	return r.Clauses(dbresolver.Write)
}

func (r roomConditionDo) Session(config *gorm.Session) IRoomConditionDo {
	return r.withDO(r.DO.Session(config))
}

func (r roomConditionDo) Clauses(conds ...clause.Expression) IRoomConditionDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roomConditionDo) Returning(value interface{}, columns ...string) IRoomConditionDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roomConditionDo) Not(conds ...gen.Condition) IRoomConditionDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roomConditionDo) Or(conds ...gen.Condition) IRoomConditionDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roomConditionDo) Select(conds ...field.Expr) IRoomConditionDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roomConditionDo) Where(conds ...gen.Condition) IRoomConditionDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roomConditionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRoomConditionDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r roomConditionDo) Order(conds ...field.Expr) IRoomConditionDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roomConditionDo) Distinct(cols ...field.Expr) IRoomConditionDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roomConditionDo) Omit(cols ...field.Expr) IRoomConditionDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roomConditionDo) Join(table schema.Tabler, on ...field.Expr) IRoomConditionDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roomConditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoomConditionDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roomConditionDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoomConditionDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roomConditionDo) Group(cols ...field.Expr) IRoomConditionDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roomConditionDo) Having(conds ...gen.Condition) IRoomConditionDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roomConditionDo) Limit(limit int) IRoomConditionDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roomConditionDo) Offset(offset int) IRoomConditionDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roomConditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomConditionDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roomConditionDo) Unscoped() IRoomConditionDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roomConditionDo) Create(values ...*model.RoomCondition) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roomConditionDo) CreateInBatches(values []*model.RoomCondition, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roomConditionDo) Save(values ...*model.RoomCondition) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roomConditionDo) First() (*model.RoomCondition, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomCondition), nil
	}
}

func (r roomConditionDo) Take() (*model.RoomCondition, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomCondition), nil
	}
}

func (r roomConditionDo) Last() (*model.RoomCondition, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomCondition), nil
	}
}

func (r roomConditionDo) Find() ([]*model.RoomCondition, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoomCondition), err
}

func (r roomConditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoomCondition, err error) {
	buf := make([]*model.RoomCondition, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roomConditionDo) FindInBatches(result *[]*model.RoomCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roomConditionDo) Attrs(attrs ...field.AssignExpr) IRoomConditionDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roomConditionDo) Assign(attrs ...field.AssignExpr) IRoomConditionDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roomConditionDo) Joins(fields ...field.RelationField) IRoomConditionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roomConditionDo) Preload(fields ...field.RelationField) IRoomConditionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roomConditionDo) FirstOrInit() (*model.RoomCondition, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomCondition), nil
	}
}

func (r roomConditionDo) FirstOrCreate() (*model.RoomCondition, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomCondition), nil
	}
}

func (r roomConditionDo) FindByPage(offset int, limit int) (result []*model.RoomCondition, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roomConditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roomConditionDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roomConditionDo) Delete(models ...*model.RoomCondition) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roomConditionDo) withDO(do gen.Dao) *roomConditionDo {
	r.DO = *do.(*gen.DO)
	return r
}
